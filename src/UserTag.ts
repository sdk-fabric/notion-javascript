/**
 * UserTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {TagAbstract} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {User} from "./User";
import {UserCollection} from "./UserCollection";

export class UserTag extends TagAbstract {
    /**
     * Returns a paginated list of Users for the workspace. The response may contain fewer than page_size of results.
     *
     * @returns {Promise<UserCollection>}
     * @throws {ClientException}
     */
    public async getAll(startCursor?: string, pageSize?: number): Promise<UserCollection> {
        const url = this.parser.url('/v1/users', {
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'start_cursor': startCursor,
                'page_size': pageSize,
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<UserCollection>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * Retrieves a User using the ID specified.
     *
     * @returns {Promise<User>}
     * @throws {ClientException}
     */
    public async get(userId: string): Promise<User> {
        const url = this.parser.url('/v1/users/:user_id', {
            'user_id': userId,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request<User>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }


}
