/**
 * PageTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {Error} from "./Error";
import {ErrorException} from "./ErrorException";
import {Page} from "./Page";

export class PageTag extends TagAbstract {
    /**
     * Retrieves a Page object using the ID specified.
     *
     * @returns {Promise<Page>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async get(pageId: string): Promise<Page> {
        const url = this.parser.url('/v1/pages/:page_id', {
            'page_id': pageId,
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Page;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * Creates a new page that is a child of an existing page or database.
     *
     * @returns {Promise<Page>}
     * @throws {ErrorException}
     * @throws {ClientException}
     */
    public async create(payload: Page): Promise<Page> {
        const url = this.parser.url('/v1/pages', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as Page;
        }

        const statusCode = response.status;
        if (statusCode >= 0 && statusCode <= 999) {
            throw new ErrorException(await response.json() as Error);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
